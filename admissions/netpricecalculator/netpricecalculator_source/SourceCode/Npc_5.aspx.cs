using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Inovas.Common.Data;
using System.Text;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace Inovas.NetPrice
{
    public partial class Npc_5 : PageBase
    {
        /* On-campus, Off-campus with family, Off-campus not with family */
        private int _numberOfResidencyLivingColumns = 0;
        private int _numberOfLivingStatusColumns = 0;

        private Dictionary<string, KeyValue> dictPoaValues = new Dictionary<string, KeyValue>();
        private Dictionary<string, KeyValue> dictTgaValues = new Dictionary<string, KeyValue>();
        // This dictionary contains values entered by user from postback (the latest values in cell)
        Dictionary<string, KeyValue> dictEnteredTga;

        protected void Page_Load(object sender, EventArgs e)
        {
            LoadContext();

            #region Check for previous inputs
            if (AppContext.InstitutionallyControlledHousingOffered.HasValue == false)
                Response.Redirect("Npc_3.aspx");
            if (AppContext.InstitutionallyControlledHousingOffered.HasValue && 
                AppContext.InstitutionallyControlledHousingOffered.Value == true &&
                AppContext.StudentsRequiredLiveOnCampusOrHousing.HasValue == false)
                Response.Redirect("Npc_3.aspx");


            if (AppContext.InstitutionType == InstitutionType.Academic)
            {
                if (AppContext.InstitutionChargeDifferentTuition.HasValue == false)
                    Response.Redirect("Npc_3.aspx");
                if (AppContext.InstitutionChargeDifferentTuition.HasValue &&
                    AppContext.InstitutionChargeDifferentTuition.Value == true &&
                    AppContext.ChargeForInDistrict.HasValue == false &&
                    AppContext.ChargeForInState.HasValue == false && AppContext.ChargeForOutOfState.HasValue == false)
                    Response.Redirect("Npc_3.aspx");
            }
            if (AppContext.InstitutionType == InstitutionType.Program)
            {
                if (string.IsNullOrEmpty(AppContext.LargestProgram))
                    Response.Redirect("Npc_4.aspx");
                if(AppContext.NumberOfMonths.HasValue == false)
                    Response.Redirect("Npc_4.aspx");
            }
                
            #endregion

            SetupPageByInstitutionType();
            ConvertAppContextArrayIntoDisctionary();

            _numberOfResidencyLivingColumns = NetPriceUtils.GetNumberOfResidencyLivingColumns(AppContext);
            _numberOfLivingStatusColumns = NetPriceUtils.GetNumberOfLivingStatusColumns(AppContext);
            // Register number of columns as JavaScript variable so we can calculate totals of each column
            ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "numberOfLivingStatuses", " var numberOfLivingStatuses=" + _numberOfLivingStatusColumns.ToString() + "; ", true);
            ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "numberOfTableColumns", "var numberOfTableColumns="+(_numberOfLivingStatusColumns*_numberOfResidencyLivingColumns)+";", true);
            
            DrawPoa();
            DrawTGA();
            RemoveSomeBorderColors();
        }

        /// <summary>
        /// Event for 'Continue' button
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void ibtnSubmit_Click(object sender, EventArgs e)
        {
            
            List<KeyValue> listTga = new List<KeyValue>();

            #region Iterate Request.Form and create listTga array
            bool zeroAutoGenerated = false;
            foreach (string key in Request.Form)
            {
                if (!key.StartsWith("txt_t"))
                    continue;

                string value = Request.Form[key];
                zeroAutoGenerated = false;

                // For table 1, maxlength is 6
                if (key.ToLower().StartsWith("txt_t1") && value.Length > 6)                
                    value = value.Substring(0, 6);
                // For table 2, maxlength is 5
                if (key.ToLower().StartsWith("txt_t2") && value.Length > 5)
                    value = value.Substring(0, 5);


                if (string.IsNullOrEmpty(value))
                {
                    value = "0";
                    zeroAutoGenerated = true;
                }
                else
                {
                    // Make sure value is integer
                    int tmpIntValue;
                    if (int.TryParse(value, out tmpIntValue))
                        value = tmpIntValue.ToString();
                    else
                    {
                        double tmpDblValue;
                        if (double.TryParse(value, out tmpDblValue))
                            value = Convert.ToInt32(tmpDblValue).ToString();
                        else
                        {
                            value = "0";
                            zeroAutoGenerated = true;
                        }
                    }
                }
                            
                if (key.ToLower().StartsWith("txt_t2"))
                    listTga.Add(new KeyValue(key, value, zeroAutoGenerated));
            }
            #endregion

            // Save original TGA dictionary so we can maintain autogenerated numbers
            Dictionary<string, KeyValue> dictOriginalTGA = new Dictionary<string, KeyValue>();            
            for (int i = 0; i < AppContext.TgaValues.Length; i++)
                dictOriginalTGA.Add(AppContext.TgaValues[i].Key, AppContext.TgaValues[i]);

            // Create dictionary from listTGA<KeyValue> so we can use it in calculate average 
            dictEnteredTga = new Dictionary<string, KeyValue>();
            for (int i = 0; i < listTga.Count; i++)
                dictEnteredTga.Add(listTga[i].Key, listTga[i]);



            #region POA2 table
            
            string inDistrictTuition = Request.Form["tbPOA_t_id"];
            if (string.IsNullOrEmpty(inDistrictTuition))
                inDistrictTuition = "0";
            string inStateTuition = Request.Form["tbPOA_t_is"];
            if (string.IsNullOrEmpty(inStateTuition))
                inStateTuition = "0";
            string outOfStateTuition = Request.Form["tbPOA_t_oos"];
            if (string.IsNullOrEmpty(outOfStateTuition))
                outOfStateTuition = "0";
            string tuitionAmount = Request.Form["tbPOA_t_amount"];
            if (string.IsNullOrEmpty(tuitionAmount))
                tuitionAmount = "0";

            string booksAndSupplies = Request.Form["tbPOA_bas"];
            if (string.IsNullOrEmpty(booksAndSupplies))
                booksAndSupplies = "0";

            string onCampusRaB = Request.Form["tbPOA_rb_oncampus"];
            if (string.IsNullOrEmpty(onCampusRaB))
                onCampusRaB = "0";
            string offCampusRaB = Request.Form["tbPOA_rb_offcampus"];
            if (string.IsNullOrEmpty(offCampusRaB))
                offCampusRaB = "0";

            string onCampusOE = Request.Form["tbPOA_other_oncampus"];
            if (string.IsNullOrEmpty(onCampusOE))
                onCampusOE = "0";
            string offCampusWithoutFamilyOE = Request.Form["tbPOA_other_offcampus"];
            if (string.IsNullOrEmpty(offCampusWithoutFamilyOE))
                offCampusWithoutFamilyOE = "0";
            string offCampusWithFamilyOE = Request.Form["tbPOA_other_offcampuswf"];
            if (string.IsNullOrEmpty(offCampusWithFamilyOE))
                offCampusWithFamilyOE = "0";

            // this variable has number of column in POA and TGA tables
            int numTableColumns = NetPriceUtils.GetNumberOfLivingStatusColumns(AppContext) * NetPriceUtils.GetNumberOfResidencyLivingColumns(AppContext);
            int numResidencyLiving = NetPriceUtils.GetNumberOfResidencyLivingColumns(AppContext);
            int numLivingStatus = NetPriceUtils.GetNumberOfLivingStatusColumns(AppContext);

            #region Parse data for "Price of Attendance" table
            
            // this list contains values for tuition for all columns
            List<string> listPoaTuition = new List<string>();
            // if tuition is vary, then we need to read "in-district", "in-state" and "out-of-state"
            if (AppContext.InstitutionChargeDifferentTuition.HasValue && AppContext.InstitutionChargeDifferentTuition.Value == true)
            {
                // add "in-district" to list                
                if(AppContext.ChargeForInDistrict.HasValue && AppContext.ChargeForInDistrict.Value == true)
                {
                    AppContext.TuitionInDistrinct = int.Parse(inDistrictTuition);
                    for (int livingStatusIndex = 0; livingStatusIndex < numLivingStatus; livingStatusIndex++)
                        listPoaTuition.Add(inDistrictTuition);
                }
                // add "in-state" to list
                if (AppContext.ChargeForInState.HasValue && AppContext.ChargeForInState.Value == true)
                {
                    AppContext.TuitionInState = int.Parse(inStateTuition);
                    for (int livingStatusIndex = 0; livingStatusIndex < numLivingStatus; livingStatusIndex++)
                        listPoaTuition.Add(inStateTuition);
                }
                // add "out-of-state" to list
                if (AppContext.ChargeForOutOfState.HasValue && AppContext.ChargeForOutOfState.Value == true)
                {
                    AppContext.TuitionOutOfState = int.Parse(outOfStateTuition);
                    for (int livingStatusIndex = 0; livingStatusIndex < numLivingStatus; livingStatusIndex++)
                        listPoaTuition.Add(outOfStateTuition);
                }

            }
            else
            {
                AppContext.TuitionAmount = int.Parse(tuitionAmount);
                // read one amount                
                for (int livingStatusIndex = 0; livingStatusIndex < numLivingStatus; livingStatusIndex++)
                    listPoaTuition.Add(tuitionAmount);
            }


            // Parse data for "Books and supplies"
            List<string> listPoaBooksAndSupplies = new List<string>();
            AppContext.BooksAndSupplies = int.Parse(booksAndSupplies);
            for (int residencyLivingIndex = 0; residencyLivingIndex < numResidencyLiving; residencyLivingIndex++)
            {
                for (int livingStatusIndex = 0; livingStatusIndex < numLivingStatus; livingStatusIndex++)
                    listPoaBooksAndSupplies.Add(booksAndSupplies);
            }

            // Parse data for "Room and board"
            List<string> listPoaRoomAndBoard = new List<string>();
            if (AppContext.InstitutionallyControlledHousingOffered.HasValue && AppContext.InstitutionallyControlledHousingOffered.Value == true)
            {
                if (AppContext.StudentsRequiredLiveOnCampusOrHousing.HasValue && AppContext.StudentsRequiredLiveOnCampusOrHousing.Value == false)
                {
                    AppContext.LivingOnCampus = int.Parse(onCampusRaB);
                    AppContext.LivingOffCampus = int.Parse(offCampusRaB);
                    AppContext.LivingOffCampusWithFamily = 0;

                    // we have 3 living statuses
                    for (int residencyLivingIndex = 0; residencyLivingIndex < numResidencyLiving; residencyLivingIndex++)
                    {
                        listPoaRoomAndBoard.Add(onCampusRaB);
                        listPoaRoomAndBoard.Add(offCampusRaB);
                        listPoaRoomAndBoard.Add("0");
                    }
                }
                else if (AppContext.StudentsRequiredLiveOnCampusOrHousing.HasValue && AppContext.StudentsRequiredLiveOnCampusOrHousing.Value == true)
                {
                    AppContext.LivingOnCampus = int.Parse(onCampusRaB);
                    // we have 1 living status                    
                    for (int residencyLivingIndex = 0; residencyLivingIndex < numResidencyLiving; residencyLivingIndex++)
                    {
                        listPoaRoomAndBoard.Add(onCampusRaB);
                    }
                }
            }
            else if (AppContext.InstitutionallyControlledHousingOffered.HasValue && AppContext.InstitutionallyControlledHousingOffered.Value == false)
            {                
                AppContext.LivingOffCampus = int.Parse(offCampusRaB);
                AppContext.LivingOffCampusWithFamily = 0;

                listPoaRoomAndBoard.Add(offCampusRaB);
                listPoaRoomAndBoard.Add("0");
                // we have 1 living status                
                for (int residencyLivingIndex = 0; residencyLivingIndex < numResidencyLiving; residencyLivingIndex++)
                {
                    listPoaRoomAndBoard.Add(offCampusRaB);
                    listPoaRoomAndBoard.Add("0");
                }
            }


            // Parse data for "Other"
            List<string> listPoaOtherExpenses = new List<string>();
            if (AppContext.InstitutionallyControlledHousingOffered.HasValue && AppContext.InstitutionallyControlledHousingOffered.Value == true)
            {
                if (AppContext.StudentsRequiredLiveOnCampusOrHousing.HasValue && AppContext.StudentsRequiredLiveOnCampusOrHousing.Value == false)
                {
                    AppContext.OtherOnCampus = int.Parse(onCampusOE);
                    AppContext.OtherOffCampus = int.Parse(offCampusWithoutFamilyOE);
                    AppContext.OtherOffCampusWithFamily = int.Parse(offCampusWithFamilyOE);
                    // we have 3 living statuses                    
                    for (int residencyLivingIndex = 0; residencyLivingIndex < numResidencyLiving; residencyLivingIndex++)
                    {
                        listPoaOtherExpenses.Add(onCampusOE);
                        listPoaOtherExpenses.Add(offCampusWithoutFamilyOE);
                        listPoaOtherExpenses.Add(offCampusWithFamilyOE);
                    }
                }
                else if (AppContext.StudentsRequiredLiveOnCampusOrHousing.HasValue && AppContext.StudentsRequiredLiveOnCampusOrHousing.Value == true)
                {
                    AppContext.OtherOnCampus = int.Parse(onCampusOE);
                    // we have 1 living status                    
                    for (int residencyLivingIndex = 0; residencyLivingIndex < numResidencyLiving; residencyLivingIndex++)
                    {
                        listPoaOtherExpenses.Add(onCampusOE);
                    }
                }
            }
            else if (AppContext.InstitutionallyControlledHousingOffered.HasValue && AppContext.InstitutionallyControlledHousingOffered.Value == false)
            {
                AppContext.OtherOffCampus = int.Parse(offCampusWithoutFamilyOE);
                AppContext.OtherOffCampusWithFamily = int.Parse(offCampusWithFamilyOE);
                // we have 1 living status                
                for (int residencyLivingIndex = 0; residencyLivingIndex < numResidencyLiving; residencyLivingIndex++)
                {
                    listPoaOtherExpenses.Add(offCampusWithoutFamilyOE);
                    listPoaOtherExpenses.Add(offCampusWithFamilyOE);
                }
            }

            // Now we need to fill AppContext.PoaValues[] array
            AppContext.PoaValues = new KeyValue[5 * numTableColumns];
            // first, add columns with totals
            int counter = 0;
            for (int i = 0; i < numTableColumns; i++)
            {
                counter++;
                AppContext.PoaValues[i] = new KeyValue("txt_t1_1_" + (i + 2), Convert.ToString(Convert.ToInt64(listPoaTuition[i]) + Convert.ToInt64(listPoaBooksAndSupplies[i])
                    + Convert.ToInt64(listPoaRoomAndBoard[i]) + Convert.ToInt64(listPoaOtherExpenses[i])), false);
            }
            // add tuition
            for (int i = 0; i < numTableColumns; i++)
            {
                counter++;
                AppContext.PoaValues[(numTableColumns * 1) + i] = new KeyValue("txt_t1_2_" + (i + 2), listPoaTuition[i], false);
            }
            // add books and supplies
            for (int i = 0; i < numTableColumns; i++)
            {
                counter++;
                AppContext.PoaValues[(numTableColumns * 2) + i] = new KeyValue("txt_t1_3_" + (i + 2), listPoaBooksAndSupplies[i], false);
            }
            // add room and board
            for (int i = 0; i < numTableColumns; i++)
            {
                counter++;
                AppContext.PoaValues[(numTableColumns * 3) + i] = new KeyValue("txt_t1_4_" + (i + 2), listPoaRoomAndBoard[i], false);
            }
            // add other expenses
            for (int i = 0; i < numTableColumns; i++)
            {
                counter++;
                AppContext.PoaValues[(numTableColumns * 4) + i] = new KeyValue("txt_t1_5_" + (i + 2), listPoaOtherExpenses[i], false);
            }
            
            #endregion

            #endregion
            
            AppContext.TgaValues = new KeyValue[listTga.Count];
            for (int i = 0; i < listTga.Count; i++)
            {
                AppContext.TgaValues[i] = listTga[i];
                string key = listTga[i].Key;

                if (dictEnteredTga[key].AutoGenerated == true)
                    AppContext.TgaValues[i].AutoGenerated = true; // means user didn't enter value, and we put zero as value (autogenerated value)
                else
                {
                    if (dictOriginalTGA.ContainsKey(key) && dictEnteredTga[key].Value == dictOriginalTGA[key].Value)
                    {
                        AppContext.TgaValues[i].AutoGenerated = dictOriginalTGA[key].AutoGenerated;
                    }
                    else if (dictOriginalTGA.ContainsKey(key) && dictEnteredTga[key].Value != dictOriginalTGA[key].Value)
                    {
                        AppContext.TgaValues[i].AutoGenerated = dictEnteredTga[key].AutoGenerated;
                    }
                }
            }

            #region Generate average value
            int numOfCols = (_numberOfLivingStatusColumns * _numberOfResidencyLivingColumns);
            int[,] arrTGA = new int[numOfCols, 11];
            bool[,] arrTGAAutoGeneratedMarks = new bool[numOfCols, 11];


            // Create int array with TGA values
            for (int i = 0; i < AppContext.TgaValues.Length; i++)
            {
                string[] id = AppContext.TgaValues[i].Key.Split(new string[] { "_" }, StringSplitOptions.RemoveEmptyEntries);
                int cell = int.Parse(id[2]);
                int row = int.Parse(id[3]);
                
                --cell;
                row = row - 2;

                if (cell < 11)
                    arrTGA[row, cell] = int.Parse(AppContext.TgaValues[i].Value);                
            }

            
            // Now go through all rows and calculate average
            for (int rowIndex = 0; rowIndex < numOfCols; rowIndex++)
            {
                for (int cellIndex = 0; cellIndex < 11; cellIndex++)
                {
                    if (arrTGA[rowIndex, cellIndex] == 0)
                    {
                        // Check that zero is autogenerated
                        string key = string.Format("txt_t2_{0}_{1}", (cellIndex+1), (rowIndex+2));
                        if (dictEnteredTga.ContainsKey(key))
                        {
                            if (dictEnteredTga[key].AutoGenerated == false)
                                continue;
                        }
                        int enteredValueIndex1 = -1;
                        int enteredValue1 = -1;

                        int enteredValueIndex2 = -1;
                        int enteredValue2 = -1;

                        int valuePosition = GetValuePosition(arrTGA, rowIndex, cellIndex, out enteredValueIndex1, out enteredValue1, out enteredValueIndex2, out enteredValue2);

                        if (valuePosition != -1 && enteredValueIndex1 != -1 && enteredValue1 != -1 && enteredValueIndex2 != -1 && enteredValue2 != -1)
                        {
                            // Call database function to calculate average for missing cell
                            arrTGA[rowIndex, cellIndex] = GetAverageValue(valuePosition, cellIndex, enteredValueIndex1, enteredValue1, enteredValueIndex2, enteredValue2);
                            arrTGAAutoGeneratedMarks[rowIndex, cellIndex] = true;
                        }
                    }
                }
            }

            // UPDATE AppContext.TgaValues
            for (int tgaValuesIndex = 0; tgaValuesIndex < AppContext.TgaValues.Length; tgaValuesIndex++)
            {
                string[] id = AppContext.TgaValues[tgaValuesIndex].Key.Split(new string[] { "_" }, StringSplitOptions.RemoveEmptyEntries);
                int cell = int.Parse(id[2]);
                int row = int.Parse(id[3]);

                --cell;
                row = row - 2;
                if (cell < 11)
                {
                    AppContext.TgaValues[tgaValuesIndex].Value = arrTGA[row, cell].ToString();

                    if (arrTGAAutoGeneratedMarks[row, cell] == true)                    
                        AppContext.TgaValues[tgaValuesIndex].AutoGenerated = true;                    
                }
            }
            #endregion


            SaveContext();
            Response.Redirect("Npc_6.aspx");
        }

        /// <summary>
        /// Show and hide div related to InstitutionType enum
        /// </summary>
        private void SetupPageByInstitutionType()
        {
            if (AppContext.InstitutionType == InstitutionType.Academic)
            {
                divAcademicStepDescription.Visible = true;
            }
            else if (AppContext.InstitutionType == InstitutionType.Program)
            {
                divProgramStepDescription.Visible = true;
                divProgramNameAndMonths.Visible = true;                
            }
        }

        /// <summary>
        /// Method return url of 'Back' button based on InstitutionType enum
        /// </summary>
        /// <returns></returns>
        protected string GetBackButtonUrl()
        {
            if (AppContext.InstitutionType == InstitutionType.Academic)
                return "Npc_3.aspx";
            else if (AppContext.InstitutionType == InstitutionType.Program)
                return "Npc_4.aspx";
            else
                return "NpC_2.aspx";
        }

        /// <summary>
        /// Get value position related to two entered values: 
        /// 1 - Means that the missing values is above.
        /// 2 - The missing value is in between the given values
        /// 3 - The missing value is below the given ones
        /// </summary>
        /// <param name="arrTGA"></param>
        /// <param name="rowIndex"></param>
        /// <param name="cellIndex"></param>
        /// <returns></returns>
        private int GetValuePosition(int[,] arrTGA, int rowIndex, int cellIndex, out int enteredValueIndex1, out int enteredValue1, out int enteredValueIndex2, out int enteredValue2)
        {
            int valuePosition = -1;            
            enteredValueIndex1 = -1;
            enteredValue1 = -1;
            enteredValueIndex2 = -1;
            enteredValue2 = -1;


            // this variables are used to find entered values
            int aboveCloseValue = -1;
            int aboveCloseIndex = -1;
            int aboveFarValue = -1;
            int aboveFarIndex = -1;
            
            int belowCloseValue = -1;
            int belowCloseIndex = -1;
            int belowFarValue = -1;
            int belowFarIndex = -1;
            


            // EXAMLE
            // --------
            // | 1 | - far value   }
            // |----               } ABOVE VALUES
            // | 2 | - close value }
            // |----
            // | X | -- missing value
            // |----
            // | 0 |               }
            // |----               }
            // | 3 | - close value }
            // |----               } BELOW VALUES 
            // | 4 | - far value   }
            // |____

            for (int cellIndexFind = 0; cellIndexFind < 11; cellIndexFind++)
            {
                if (cellIndexFind == cellIndex)
                    continue;


                string dictKey = string.Format("txt_t2_{0}_{1}", (cellIndexFind + 1), (rowIndex + 2));
                if (arrTGA[rowIndex, cellIndexFind] != 0 || (dictEnteredTga[dictKey].AutoGenerated == false && dictEnteredTga[dictKey].Value == "0"))
                {
                    // we found a value ABOVE missing value
                    if (cellIndexFind < cellIndex)
                    {
                        // set far value to current close value
                        if (aboveCloseValue != -1)
                        {                            
                            aboveFarIndex = aboveCloseIndex;
                            aboveFarValue = aboveCloseValue;
                        }

                        // set new close value
                        aboveCloseValue = arrTGA[rowIndex, cellIndexFind];
                        aboveCloseIndex = cellIndexFind;                      
                    }
                    else
                    {
                        if (belowCloseIndex == -1)
                        {
                            belowCloseIndex = cellIndexFind;
                            belowCloseValue = arrTGA[rowIndex, cellIndexFind];
                        }
                        else if (belowFarIndex == -1)
                        {
                            belowFarIndex = cellIndexFind;
                            belowFarValue = arrTGA[rowIndex, cellIndexFind];
                        }
                    }
                }
            }



            // BETWEEN range has higher priority
            if (aboveCloseIndex != -1 && belowCloseIndex != -1)
            {
                valuePosition = 2;

                enteredValueIndex1 = aboveCloseIndex;
                enteredValue1 = aboveCloseValue;

                enteredValueIndex2 = belowCloseIndex;
                enteredValue2 = belowCloseValue;
            }
            else if (aboveCloseIndex != -1 && aboveFarIndex != -1)
            {
                // Entered values ABOVE missing values
                valuePosition = 3;

                enteredValueIndex1 = aboveFarIndex;
                enteredValue1 = aboveFarValue;

                enteredValueIndex2 = aboveCloseIndex;
                enteredValue2 = aboveCloseValue;
            }
            else if (belowCloseIndex != -1 && belowFarIndex != -1)
            {
                // Entered values BELOW missing values
                valuePosition = 1;

                enteredValueIndex1 = belowCloseIndex;
                enteredValue1 = belowCloseValue;

                enteredValueIndex2 = belowFarIndex;
                enteredValue2 = belowFarValue;

            }            

            return valuePosition;
        }

        /// <summary>
        /// Call database function to calculate average for a cell with missing value
        /// </summary>
        /// <param name="valuePosition"></param>
        /// <param name="enteredValueIndex1"></param>
        /// <param name="enteredValue1"></param>
        /// <param name="enteredValueIndex2"></param>
        /// <param name="enteredValue2"></param>
        /// <returns></returns>
        private int GetAverageValue(int valuePosition, int missingIndex, int enteredValueIndex1, int enteredValue1, int enteredValueIndex2, int enteredValue2)
        {
            object returnValue = SqlHelper.ExecScalar(string.Format("SELECT 'MissingValue' = dbo.getMissingValue({0},{1},{2},{3},{4},{5})", missingIndex, valuePosition, enteredValueIndex1, enteredValue1, enteredValueIndex2, enteredValue2));
            if(returnValue != null && returnValue != DBNull.Value)
                return int.Parse(returnValue.ToString());
            else
                return 0;           
        }



        /// <summary>
        /// Draw 'Price of Attendace' table
        /// </summary>
        private void DrawPoa()
        {
            AddResidencyLivingColumns(tblPOA, "Price of attendance");
            AddLivingStatusColumns(tblPOA);
            tblPOA.Style.Add("border-bottom", "1px solid #c8c6b4");
            TableRow tr;
            TableCell tc;

            // Add rows with textboxes
            for (int rowIndex = 1; rowIndex <= 5; rowIndex++)
            {
                tr = new TableRow();
                if(rowIndex % 2 == 0)
                    tr.Style.Add("background-color", "#ecece1");
                TableHeaderCell thc = new TableHeaderCell();
                thc.Style.Add("width", "92px");                                
                thc.Style.Add("line-height", "13px");
                thc.Style.Add("text-align", "left");                
                thc.Style.Add("padding-left", "10px");
                thc.Style.Add("padding-top", "9px");
                thc.Style.Add("padding-bottom", "9px");
                
                
                #region Write first column text
                switch (rowIndex)
                {
                    case 1:
                        thc.Text = "Total";
                        break;
                    case 2:
                        thc.Text = "Tuition and required fees";
                        break;
                    case 3:
                        thc.Text = "Books and supplies";
                        break;
                    case 4:
                        thc.Text = "Room and board";
                        break;
                    case 5:
                        thc.Text = "Other (personal, transportation, etc.)";
                        break;
                }
                #endregion
                tr.Cells.Add(thc);


                tc = new TableCell();
                tc.Style.Add("width", "92px");                
                tc.Style.Add("padding-left", "0px");
                tc.Style.Add("line-height", "13px");                

                int columnIndex = 2;
                for (int residencyLivingColumnIndex = 1; residencyLivingColumnIndex <= _numberOfResidencyLivingColumns; residencyLivingColumnIndex++)
                {
                    for (int livingStatusColumnIndex = 1; livingStatusColumnIndex <= _numberOfLivingStatusColumns; livingStatusColumnIndex++)
                    {
                        string header1 = tblPOA.Rows[0].Cells[residencyLivingColumnIndex].Attributes["id"];                         
                        
                        //int header2CellIndex = (residencyLivingColumnIndex * _numberOfResidencyLivingColumns - _numberOfResidencyLivingColumns) + livingStatusColumnIndex - 1;
                        int header2CellIndex = ((residencyLivingColumnIndex - 1) * _numberOfLivingStatusColumns) + livingStatusColumnIndex - 1;

                        string header2 = tblPOA.Rows[1].Cells[header2CellIndex].Attributes["id"];
                        tc = new TableCell();
                        if (livingStatusColumnIndex == 1 && _numberOfResidencyLivingColumns != 1)
                            tc.Style.Add("border-left", "1px solid #c8c6b4");
                        string headerValue = "";
                        if (!string.IsNullOrEmpty(header1))
                            headerValue = header1 + " ";
                        headerValue += header2;
                        tc.Attributes.Add("headers", headerValue);
                        FormatCellWithTextbox(tc);
                        tc.Text = GenerateTextboxHtml(1, rowIndex, columnIndex, rowIndex == 1, true); /* (residencyLivingColumnIndex * livingStatusColumnIndex) + 1*/
                        tr.Cells.Add(tc);
                        columnIndex++;
                    }
                }

                tblPOA.Rows.Add(tr);
            }


            #region POA table setup
            if (AppContext.InstitutionType == InstitutionType.Academic)
            {
                if (AppContext.InstitutionChargeDifferentTuition.HasValue && AppContext.InstitutionChargeDifferentTuition.Value == false)
                {
                    tblPOA2.Rows[1].Visible = true;
                    tblPOA2.Rows[2].Visible = false;
                    tblPOA2.Rows[3].Visible = false;
                    tblPOA2.Rows[4].Visible = false;
                }
                else
                {
                    tblPOA2.Rows[1].Visible = false;
                    if (AppContext.ChargeForInDistrict.HasValue && AppContext.ChargeForInDistrict.Value == true)
                        tblPOA2.Rows[2].Visible = true;
                    else
                        tblPOA2.Rows[2].Visible = false;
                    if (AppContext.ChargeForInState.HasValue && AppContext.ChargeForInState.Value == true)
                        tblPOA2.Rows[3].Visible = true;
                    else
                        tblPOA2.Rows[3].Visible = false;
                    if (AppContext.ChargeForOutOfState.HasValue && AppContext.ChargeForOutOfState.Value == true)
                        tblPOA2.Rows[4].Visible = true;
                    else
                        tblPOA2.Rows[4].Visible = false;
                }

                if (_numberOfLivingStatusColumns != 3)
                {
                    if (_numberOfLivingStatusColumns == 1)
                    {
                        // we need to display only On-campus
                        tblPOA2.Rows[6].Cells[2].Visible = false;
                        tblPOA2.Rows[6].Cells[3].Visible = false;

                        tblPOA2.Rows[7].Cells[2].Visible = false;
                        tblPOA2.Rows[7].Cells[3].Visible = false;

                        tblPOA2.Rows[8].Cells[2].Visible = false;
                        tblPOA2.Rows[8].Cells[3].Visible = false;
                                                
                        tblPOA2.Rows[6].Cells[1].Width = Unit.Empty;

                    }
                    else if (_numberOfLivingStatusColumns == 2)
                    {
                        // we need to display only off-campus not with family and off-campus with family
                        tblPOA2.Rows[6].Cells[1].Visible = false;
                        tblPOA2.Rows[7].Cells[1].Visible = false;
                        tblPOA2.Rows[8].Cells[1].Visible = false;

                        tblPOA2.Rows[6].Cells[2].Width = Unit.Pixel(230);
                    }
                }
            }
            else if(AppContext.InstitutionType == InstitutionType.Program)
            {
                tblPOA2.Rows[1].Visible = true;
                tblPOA2.Rows[2].Visible = false;
                tblPOA2.Rows[3].Visible = false;
                tblPOA2.Rows[4].Visible = false;

                if (_numberOfLivingStatusColumns != 3)
                {
                    if (_numberOfLivingStatusColumns == 1)
                    {
                        // we need to display only On-campus
                        tblPOA2.Rows[6].Cells[2].Visible = false;
                        tblPOA2.Rows[6].Cells[3].Visible = false;

                        tblPOA2.Rows[7].Cells[2].Visible = false;
                        tblPOA2.Rows[7].Cells[3].Visible = false;

                        tblPOA2.Rows[8].Cells[2].Visible = false;
                        tblPOA2.Rows[8].Cells[3].Visible = false;
                    }
                    else if (_numberOfLivingStatusColumns == 2)
                    {
                        // we need to display only off-campus not with family and off-campus with family
                        tblPOA2.Rows[6].Cells[1].Visible = false;
                        tblPOA2.Rows[7].Cells[1].Visible = false;
                        tblPOA2.Rows[8].Cells[1].Visible = false;
                    }
                }            
            }

            
            





            #endregion




        }

        /// <summary>
        /// Draw 'Grands and Schoolarship studens'
        /// </summary>
        private void DrawTGA()
        {
            AddResidencyLivingColumns(tblTGA, "EFC Range ($)");
            AddLivingStatusColumns(tblTGA);
            tblTGA.Style.Add("border-top", "1px solid #c8c6b4");
            tblTGA.Style.Add("border-bottom", "1px solid #c8c6b4");
            

            // Add rows with textboxes
            for (int rowIndex = 1; rowIndex <= 13; rowIndex++)
            {
                TableRow tr = new TableRow();
                if (rowIndex % 2 == 0)
                    tr.Style.Add("background-color", "#ecece1");
                TableHeaderCell thc = new TableHeaderCell();
                thc.Style.Add("padding-left", "10px");
                thc.Style.Add("padding-top", "9px");
                thc.Style.Add("padding-bottom", "9px");
                thc.Style.Add("line-height", "13px");
                thc.Style.Add("text-align", "left");
                thc.Style.Add("border-bottom", "1px solid #c8c6b4");
                thc.Style.Add("width", "180px");
                #region Write first column text with money amount
                switch (rowIndex)
                {
                    case 1:
                        thc.Text = "0";
                        break;
                    case 2:
                        thc.Text = "1-1,000";
                        break;
                    case 3:
                        thc.Text = "1,001-2,500";
                        break;
                    case 4:
                        thc.Text = "2,501-5,000";
                        break;
                    case 5:
                        thc.Text = "5,001-7,500";
                        break;
                    case 6:
                        thc.Text = "7,501-10,000";
                        break;
                    case 7:
                        thc.Text = "10,001-12,500";
                        break;
                    case 8:
                        thc.Text = "12,501-15,000";
                        break;
                    case 9:
                        thc.Text = "15,001-20,000";
                        break;
                    case 10:
                        thc.Text = "20,001-30,000";
                        break;
                    case 11:
                        thc.Text = "30,001-40,000";
                        break;
                    case 12:
                        thc.Text = ">40,000";
                        break;
                    case 13:
                        thc.Text = "Non-FAFSA filers/unknown EFC";
                        break;
                }
                #endregion
                tr.Cells.Add(thc);


                TableCell tc = new TableCell();
                tc.Style.Add("border-bottom", "1px solid #c8c6b4");
                tc.Style.Add("width", "99px");
                tc.Style.Add("padding-left", "0px");
                tc.Style.Add("line-height", "13px");

                int columnIndex = 2;
                for (int residencyLivingColumnIndex = 1; residencyLivingColumnIndex <= _numberOfResidencyLivingColumns; residencyLivingColumnIndex++)
                {
                    for (int livingStatusColumnIndex = 1; livingStatusColumnIndex <= _numberOfLivingStatusColumns; livingStatusColumnIndex++)
                    {
                        string header1 = tblTGA.Rows[0].Cells[residencyLivingColumnIndex].Attributes["id"];
                        //int header2CellIndex = (residencyLivingColumnIndex * _numberOfResidencyLivingColumns - _numberOfResidencyLivingColumns) + livingStatusColumnIndex - 1;
                        int header2CellIndex = ((residencyLivingColumnIndex - 1) * _numberOfLivingStatusColumns) + livingStatusColumnIndex - 1;
                        string header2 = tblTGA.Rows[1].Cells[header2CellIndex].Attributes["id"];
                        
                        tc = new TableCell();
                        tc.Style.Add("border-bottom", "1px solid #c8c6b4");
                        if (livingStatusColumnIndex == 1 )
                            tc.Style.Add("border-left", "1px solid #c8c6b4");
                        tc.Attributes.Add("headers", string.Format("{0} {1}", header1, header2));
                        FormatCellWithTextbox(tc);
                        tc.Text = GenerateTextboxHtml(2, rowIndex, columnIndex , false, false); /* (residencyLivingColumnIndex * livingStatusColumnIndex) + 1 */
                        tr.Cells.Add(tc);
                        columnIndex++;
                    }
                }
               
                tblTGA.Rows.Add(tr);
            }            
        }

        /// <summary>
        /// Draw In-district, In-state, Out-of-state
        /// </summary> 
        private void AddResidencyLivingColumns(Table tblData, string firstCellText)
        {
            // new table row
            TableRow tr = new TableRow();

            // First cell
            TableHeaderCell tc = new TableHeaderCell();
            tc.Text = firstCellText; 
            tc.RowSpan = 2;
            tc.Style.Add("vertical-align", "bottom");
            tc.Style.Add("text-align", "left");
            tc.Style.Add("line-height", "14px");
            tc.Style.Add("background-color", "#cecec0");
            tc.Style.Add("border-bottom", "1px solid #c8c6b4");            
            tc.Style.Add("padding-left", "10px");
            tc.Style.Add("font-weight", "bold");
            tc.Style.Add("color", "#686653");
            tr.Cells.Add(tc);


            // if institution calendar system is "Program", or institution does not charge different tuition, show only one column for residency living
            if (AppContext.InstitutionChargeDifferentTuition.HasValue == false || (AppContext.InstitutionChargeDifferentTuition.HasValue && AppContext.InstitutionChargeDifferentTuition.Value == false))
            {
                tc = new TableHeaderCell();
                tc.Text = "Amount";
                tc.CssClass = "ColumnTableTitle";
                tc.Style.Add("background-color", "#cecec0");
                tc.Style.Add("border-left", "1px solid #c8c6b4");
                tc.Style.Add("color", "#cc6600");
                tc.Style.Add("font-size", "12px");
                tc.HorizontalAlign = HorizontalAlign.Center;
                tc.ColumnSpan = _numberOfLivingStatusColumns;
                tr.Cells.Add(tc);
            }
            else
            {
                if (AppContext.ChargeForInDistrict.HasValue && AppContext.ChargeForInDistrict.Value == true)
                {
                    tc = new TableHeaderCell();
                    tc.Style.Add("background-color", "#cecec0");
                    tc.Style.Add("border-left", "1px solid #c8c6b4");
                    tc.Style.Add("color", "#cc6600");
                    tc.Style.Add("font-size", "12px");
                    tc.Text = "In-district";
                    tc.Attributes.Add("id", "InDistrict");
                    tc.CssClass = "ColumnTableTitle";
                    tc.HorizontalAlign = HorizontalAlign.Center;
                    tc.ColumnSpan = _numberOfLivingStatusColumns;
                    tr.Cells.Add(tc);
                }
                if (AppContext.ChargeForInState.HasValue && AppContext.ChargeForInState.Value == true)
                {
                    tc = new TableHeaderCell();
                    tc.Style.Add("background-color", "#cecec0");
                    tc.Style.Add("border-left", "1px solid #c8c6b4");
                    tc.Style.Add("font-size", "12px");
                    tc.Style.Add("color", "#cc6600");
                    tc.Text = "In-state";
                    tc.Attributes.Add("id", "InState");
                    tc.CssClass = "ColumnTableTitle";
                    tc.HorizontalAlign = HorizontalAlign.Center;
                    tc.ColumnSpan = _numberOfLivingStatusColumns;
                    tr.Cells.Add(tc);
                }
                if (AppContext.ChargeForOutOfState.HasValue && AppContext.ChargeForOutOfState.Value == true)
                {
                    tc = new TableHeaderCell();
                    tc.Style.Add("background-color", "#cecec0");
                    tc.Style.Add("border-left", "1px solid #c8c6b4");
                    tc.Style.Add("font-size", "12px");
                    tc.Style.Add("color", "#cc6600");
                    tc.Text = "Out-of-state";
                    tc.Attributes.Add("id", "OutOfState");
                    tc.CssClass = "ColumnTableTitle";
                    tc.HorizontalAlign = HorizontalAlign.Center;
                    tc.ColumnSpan = _numberOfLivingStatusColumns;
                    tr.Cells.Add(tc);
                }
            }
        
            // Add row to table
            tblData.Rows.Add(tr);
        }

        /// <summary>
        /// Draw n-campus, Off-campus with family, Off-campus without family
        /// </summary>
        private void AddLivingStatusColumns(Table tblData)
        {
            // new table row
            TableRow tr = new TableRow();

            TableHeaderCell tc;
            bool leftBorderNeeded = true;
            bool leftBorderAdded = false;
            // Display left border only if we not dispalying "One Amount"
            if (AppContext.InstitutionChargeDifferentTuition.HasValue == false || (AppContext.InstitutionChargeDifferentTuition.HasValue && AppContext.InstitutionChargeDifferentTuition.Value == false))
            {
                //leftBorderNeeded = false;
            }

            for (int i = 1; i <= _numberOfResidencyLivingColumns; i++)
            {
                if (_numberOfLivingStatusColumns == 1 || _numberOfLivingStatusColumns == 3)
                {
                    tc = new TableHeaderCell();
                    tc.Style.Add("border-bottom", "1px solid #c8c6b4");
                    if (leftBorderNeeded)
                        tc.Style.Add("border-left", "1px solid #c8c6b4");
                    tc.Style.Add("background-color", "#cecec0");
                    tc.Style.Add("vertical-align", "bottom");
                    tc.Style.Add("font-weight", "bold");
                    tc.Style.Add("color", "#686653");
                    tc.Text = "On-campus";
                    tc.Attributes.Add("id", string.Format("{0}OnCampus", i));
                    FormatCellWithLivingStatus(tc);
                    tr.Cells.Add(tc);
                    leftBorderAdded = true;
                }                
                
                if (_numberOfLivingStatusColumns == 3 || _numberOfLivingStatusColumns == 2)
                {
                    tc = new TableHeaderCell();
                    tc.Style.Add("background-color", "#cecec0");
                    tc.Style.Add("border-bottom", "1px solid #c8c6b4");
                    tc.Style.Add("vertical-align", "bottom");
                    tc.Style.Add("font-weight", "bold");
                    tc.Style.Add("color", "#686653");
                    tc.Text = "Off-campus not with family";
                    tc.Attributes.Add("id", string.Format("{0}OffCampusNotWithFamily", i));
                    FormatCellWithLivingStatus(tc);
                    if (leftBorderNeeded)
                    {
                        if (!leftBorderAdded)
                            tc.Style.Add("border-left", "1px solid #c8c6b4");
                    }
                    tr.Cells.Add(tc);

                    tc = new TableHeaderCell();
                    tc.Style.Add("background-color", "#cecec0");
                    tc.Style.Add("border-bottom", "1px solid #c8c6b4");
                    tc.Style.Add("vertical-align", "bottom");
                    tc.Style.Add("font-weight", "bold");
                    tc.Style.Add("color", "#686653");                    
                    tc.Text = "Off-campus with family";
                    tc.Attributes.Add("id", string.Format("{0}OffCampusWithFamily", i));
                    FormatCellWithLivingStatus(tc);
                    tr.Cells.Add(tc);                    
                }
            }

            tblData.Rows.Add(tr);
        }

        /// <summary>
        /// Generate html code for textbox
        /// </summary>
        /// <param name="tableNumber"></param>
        /// <param name="rowIndex"></param>
        /// <param name="colIndex"></param>
        /// <param name="readonlyTextbox"></param>
        /// <param name="fillZeroForFirstRow"></param>
        /// <returns></returns>
        private string GenerateTextboxHtml(int tableNumber, int rowIndex, int colIndex, bool readonlyTextbox, bool fillZeroForFirstRow)
        {
            string template = "<input type='text' id='#ID#' name='#ID#' value='#VALUE#' style='#STYLE#' maxlength='#MAXLENGTH#' #READONLY# #EVENTS# />";
            string cssStyle = "width:53px;";

            // add ID to textbox
            string textboxId = string.Format("txt_t{0}_{1}_{2}", tableNumber.ToString(), rowIndex, colIndex);
            template = template.Replace("#ID#", textboxId);

            // add events for POA table and TGA table
            if (tableNumber == 1)
            {
                template = template.Replace("#EVENTS#", " onkeyup='CalculateTotal(this)' onchange='ValidateInput(this)' ");
                template = template.Replace("#MAXLENGTH#", "6");
            }
            else if (tableNumber == 2)
            {
                template = template.Replace("#EVENTS#", " onchange='ValidateInput(this)' ");
                template = template.Replace("#MAXLENGTH#", "5");
            }

            //fill textbox with zero
            if (fillZeroForFirstRow == true && rowIndex == 1)
                template = template.Replace("#VALUE#", "0");

            // set readonly to textbox
            if (readonlyTextbox == true)
            {
                template = template.Replace("#READONLY#", "readonly='readonly'");
                cssStyle += "background-color:#eeeeee;";
            }

            // add CSS
            template = template.Replace("#STYLE#", cssStyle);


            
            // now set value from AppContext if it exists
            if (tableNumber == 1)
            {
                if (dictPoaValues.ContainsKey(textboxId))
                {
                    int tmpValue = 0;
                    int.TryParse(dictPoaValues[textboxId].Value, out tmpValue);
                    if (tmpValue != 0)
                        template = template.Replace("#VALUE#", tmpValue.ToString());
                }
            }
            if (tableNumber == 2)
            {
                if (dictTgaValues.ContainsKey(textboxId))
                {
                    int tmpValue = 0;
                    int.TryParse(dictTgaValues[textboxId].Value, out tmpValue);
                    if (tmpValue != 0)
                        template = template.Replace("#VALUE#", tmpValue.ToString());
                    else
                    {
                        // displays zero only for autogenerated columns
                        if(dictTgaValues[textboxId].AutoGenerated==false)
                            template = template.Replace("#VALUE#", "0");
                    }
                }
            }

            // Make sure we replaced all strings
            template = template.Replace("#VALUE#", "").Replace("#STYLE#", "").Replace("#READONLY#", "").Replace("#EVENTS#", "").Replace("#MAXLENGTH#", "");

            return template;
        }

        /// <summary>
        /// Method removes border from left nad right sides of table
        /// </summary>
        private void RemoveSomeBorderColors()
        {
            //POA
            for (int rowIndex = 0; rowIndex < tblPOA.Rows.Count; rowIndex++)
            {
                //tblPOA.Rows[rowIndex].Cells[0].Style.Add("border-left", "solid 0px white");
                tblPOA.Rows[rowIndex].Cells[tblPOA.Rows[rowIndex].Cells.Count - 1].Style.Add("border-right", "solid 0px white");
            }

            //tblPOA.Rows[0].Cells[0].Style.Add("border-bottom", "solid 0px white");
            tblPOA.Rows[1].Cells[0].Style.Add("border-top", "solid 0px white");


            //TGA
            for (int rowIndex = 0; rowIndex < tblTGA.Rows.Count; rowIndex++)
            {
                //tblTGA.Rows[rowIndex].Cells[0].Style.Add("border-left", "solid 0px white");
                tblTGA.Rows[rowIndex].Cells[tblTGA.Rows[rowIndex].Cells.Count - 1].Style.Add("border-right", "solid 0px white");
            }

            //tblTGA.Rows[0].Cells[0].Style.Add("border-bottom", "solid 0px white");
            tblTGA.Rows[1].Cells[0].Style.Add("border-top", "solid 0px white");
        }

        /// <summary>
        /// Add css style to cell which contains textbox
        /// </summary>
        /// <param name="tc"></param>
        private void FormatCellWithTextbox(TableCell tc)
        {
            tc.Style.Add("text-align", "center");
        }

        /// <summary>
        /// Format cell with living status
        /// </summary>
        /// <param name="?"></param>
        private void FormatCellWithLivingStatus(TableCell tc)
        {            
            tc.Style.Add("text-align", "center");
            tc.Style.Add("line-height", "14px");
        }

        /// <summary>
        /// Method convert PoaValues and TgaValues arrays into dictionary 
        /// so we can easyly get value by key
        /// </summary>
        private void ConvertAppContextArrayIntoDisctionary()
        {
            // POA
            if (AppContext.PoaValues != null)
            {
                for (int i = 0; i < AppContext.PoaValues.Length; i++)                
                    dictPoaValues.Add(AppContext.PoaValues[i].Key, AppContext.PoaValues[i]);                
            }

            // TGA
            if (AppContext.TgaValues != null)
            {
                for (int i = 0; i < AppContext.TgaValues.Length; i++)
                    dictTgaValues.Add(AppContext.TgaValues[i].Key, AppContext.TgaValues[i]);
            }
        }

    }   

}